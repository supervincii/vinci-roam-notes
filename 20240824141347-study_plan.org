:PROPERTIES:
:ID:       821A025B-8A68-428D-9701-AD1A69A69635
:END:
#+title: Study Plan
* Embedded Software Engineering Self Study Plan
** Phase 1: Core Foundations and CS Fundamentals
*** Topics and Time Allocation

| Topic Area                | Daily Time Allocation |
|---------------------------+-----------------------|
| Programming Languages     | 2 hours               |
| Electronics & Prototyping | 1 hour                |
| CS Fundamentals           | 1 hour                |

*** Topics and Resources

| Topic                               | Resource                                                      |
|-------------------------------------+---------------------------------------------------------------|
| C Programming                       | C Programming: A Modern Approach                              |
| C++ Programming (Introduction)      |                                                               |
| Principles of Electric Circuits     | Principles of Electric Circuits: Conventional Current Version |
| Electronics Fundamentals            | Electronics Fundamentals: Circuits, Devices, & Applications   |
| Data Structures & Algorithms        | The Algorithm Design Manual                                   |
| GPIO (General-Purpose Input/Output) |                                                               |
| ADC/DAC (Introduction)              |                                                               |
| Breadboarding                       |                                                               |
| Soldering/Rework                    |                                                               |
| Math for CS                         | Discrete Mathematics and its Applications                     |
| Computer Networking                 | Computer Networking: A Top Down Approach                      |
| Operating Systems Fundamentals      | Operating Systems: Three Easy Pieces                          |

*** Projects

1. Implement basic data structures (linked lists, stacks, queues) in C.
2. Build simple electronic circuits on a breadboard (e.g., LED blinking, button input).
3. Create a simple client-server application in C using sockets for basic networking.

*** Capstone Project

*Smart Sensor System*:

Develop an Arduino based system that reads sensor data, and sends it to a PC application over a serial or network communication. The PC application will display real-time data.

** Phase 2: Intermediate Embedded Systems and Enhanced CS Concepts
*** Topics and Time Allocation

| Topic Area                                | Daily Time Allocation |
|-------------------------------------------+-----------------------|
| Advanced Programming and Microcontrollers | 2 hours               |
| Build Systems and Debugging               | 1 hour                |
| CS Fundamentals                           | 1 hour                |

*** Topics and Resources

| Topic                          | Resource                                                           |
|--------------------------------+--------------------------------------------------------------------|
| C++ Programming (Advanced)     | Effective Modern C++ by Scott Meyers                               |
| ARM Assembly                   | ARM Assembly Language by William Hohl                              |
| Computer Architecture          | Computer Organization and Design: ARM Edition                      |
| ADC/DAC                        |                                                                    |
| Timers/Counters                |                                                                    |
| PWM (Pulse-Width Modulation)   |                                                                    |
| Interrupts                     |                                                                    |
| DMA (Direct Memory Access)     |                                                                    |
| Clock Management               |                                                                    |
| Operating Systems              | Modern Operating Systems by Andrew S. Tanenbaum                    |
| Compilers/GCC                  |                                                                    |
| Make/CMake                     |                                                                    |
| Bash Scripting                 |                                                                    |
| GDB                            |                                                                    |
| Languages & Compilers          | Writing an Interpreter & Compiler in Go by Thorsten Ball           |
| Computer Networking (Advanced) | Computer Networking: A Top Down Approach (Ch. 4 - 7)               |
| Algorithms                     | Introduction to Algorithms by Cormen, Leiserson, Rivest, and Stein |

*** Projects

1. Write ARM assembly programs implementing basic algorithms
2. Develop firmware for an ARM-based microcontroller (e.g., STM32) utilizing peripherals like PWM to control servo motors.
3. Build a simple compiler or interpreter for a subset of a language (e.g., arithmetic expressions)

*** Capstone Project

*Embedded Networking Device*:

Design and implement a network-enabled device using an ARM microcontroller that collects sensor data and communicates over TCP/IP, integrating advanced C++ features and operating systems concepts.

** Phase 3: Advanced Embedded Systems and Specialized Topics

*** Topics and Time Allocation

| Topic Area                     | Daily Time Allocation |
|--------------------------------+-----------------------|
| RTOS and Embedded Linux        | 2 hours               |
| Interfaces and Protocols       | 1 hour                |
| Security and Signal Processing | 1 hour                |

*** Topics and Resources

| Topic                                 | Resource                                                                                         |
|---------------------------------------+--------------------------------------------------------------------------------------------------|
| RTOS Basics                           |                                                                                                  |
| FreeRTOS                              | Mastering the FreeRTOS Real Time Kernel by Richard Barry                                         |
| Zephyr                                |                                                                                                  |
| Embedded Linux                        | Mastering Embedded Linux Programming by Chris Simmonds                                           |
| Device Drivers                        | Linux Device Drivers by Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman               |
| I2C, SPI, UART                        |                                                                                                  |
| Wireless Protocols (Bluetooth, Wi-Fi) |                                                                                                  |
| Network Programming                   | Hands-On Network Programming with C by Lewis Van Winkle, Network Algorithmics by George Varghese |
| Memory Technologies and File Systems  |                                                                                                  |
| Testing                               | Test Driven Development for Embedded C by James W. Grenning                                      |
| Secure Bootloaders                    |                                                                                                  |
| Encryption Techniques                 | Embedded Systems Security by David Kleidermacher and Mike Kleidermacher                          |
| Filters and Transforms                | Signal Processing for Embedded Systems by Roger Woods et al.                                     |
| QEMU                                  |                                                                                                  |
| Renode                                |                                                                                                  |
| Distributed Systems                   | Designing Data-Intensive Applications by Martin Kleppmann                              |

*** Projects

1. Implement a multi-threaded real-time data logger using FreeRTOS.
2. Develop a Linux device driver for a custom hardware interface.
3. Create a secure communication channel between two embedded devices using encryption.
4. Simulate an embedded system using QEMU and test firmware applications.

*** Capstone Project

*Embedded Linux Device with Secure Monitoring*:

Build and embedded Linux system on a Raspberry Pi that interfaces with custom hardware, includes a device driver, uses secure network protocols, and implements real-time data processing.

** Phase 4: Specialization in Advanced Topics and Hardware Design

*** Topics and Time Allocation

| Topic Area                             | Daily Time Allocation |
|----------------------------------------+-----------------------|
| Design Patterns and Advanced Debugging | 2 hours               |
| Prototyping and HDL                    | 1 hour                |
| Emerging Technologies                  | 1 hour                |

*** Topics and Resources

| Topic                                    | Resources/Focus Items                                                                                                                          |
|------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
| Design Patterns                          | Design Patterns for Embedded Systems in C by Bruce Powel Douglass, Making Embedded Systems: Design Patterns for Great Software by Elecia White |
| State Machines                           | Implementing finite state machines in embedded applications.                                                                                   |
| Memory Management                        | Advanced techniques in dynamic memory allocation and optimization.                                                                             |
| Linux Kernel Development                 | Linux Kernel Development by Robert Love, The Linux Programming Interface by Michael Kerrisk                                                    |
| JTAG/SWD Debugging Techniques            |                                                                                                                                                |
| Hardware Design Basics                   |                                                                                                                                                |
| PCB Design/EMC Considerations            | PCB Design for Real World EMI Control by Bruce Archambeault                                                                                    |
| VHDL or Verilog Basics                   |                                                                                                                                                |
| FPGA Programming                         | Digital Design and Computer Architecture by David Harris and Sarah Harris                                                                      |
| Functional Safety Standards (ISO 26262)  |                                                                                                                                                |
| Failure Mode and Effects Analysis (FMEA) | Safety Critical Systems Handbook by David J. Smith and Kenneth G. L. Simpson                                                                   |
| Embedded ML                              | TinyML by Pete Warden and Daniel Situnayake                                                                                                    |
| Databases                                | CMU Introduction to Databases                                                                                                                  |

*** Projects

1. Design and fabricate a custom PCB for a microcontroller-based system.
2. Develop a FPGA project implementing a digital signal processing algorithm.
3. Implement a safety-critical embedded application following ISO 26262 guidelines.
4. Deploy a TinyML model on a microcontroller for real-time data classification (e.g., gesture recognition)

*** Capstone Project

*Advanced Embedded System with ML and Safety Features*:

Develop an embedded system that includes custom hardware (PCB design), integrates machine learning for intelligent features, complies with safety standards, and utilizes advanced debugging and optimization techniques.
* Backend Engineering Study Plan
** Programming Foundations and Data Structures
*** Programming in C
Resources:
- C Programming: A Modern Approach
  
*** Data Structures and Algorithms
Resources:
- The Algorithm Design Manual
- Introduction to Algorithms

*** Mathematics for Computer Science
Resources:
- Discrete Mathematics and Its Applications
- MIT OpenCourseWare: Mathematics for Computer Science

*** Books
- Test-Driven Development by Example by Kent Beck
- The Pragmatic Programmer by Andrew Hunt and David Thomas

*** Projects
- Write own versions of fundamental data structures using C.
- Implement sorting and searching algorithms, and analyze for performance.

*** Capstone Project
*Library Management System*

Develop a console-based application that manages book inventories, borrowing, and returning functionalities.

Goals:
- Utilize data structures to store and manage data.
- Implement algorithms for search and sort features.
- Practice file I/O operations in C.
- Apply testing practices learned.
** Computer Architecture, Operating Systems, and Web Servers
*** Computer Architecture
Resources:
- Computer Systems: A Programmer's Perspective
  
*** Operating Systems
Resources:
- Operating Systems: Three Easy Pieces

*** Web Servers
Resources:
- Mastering Nginx by Dimitri Aivaliotis
- High Performance Browser Networking by Ilya Grigorik
  - Select chapters relevant to web servers

*** Books
- Modern Software Engineering by David Farley
- Head First Design Patterns by Eric Freeman and Elisabeth Robson
- Art of Unit Testing by Roy Osherove

*** Projects
- Build a simple Unix shell that can execute commands and handle basic I/O redirection.
- Develop a basic web server that can handle HTTP requests and serve static files.
- Install Nginx and perform basic configurations to serve static content and reverse proxy requests to your web server.

*** Capstone Project
*Scalable Web Application with Nginx and Go*

Build a full-featured web application that integrates Nginx and your Go web server to create a scalable, high-performance platform. The project will involve:

- Nginx:
  - Advanced configuration to handle load balancing across multiple instances of your Go web server.
  - Implementing caching strategies for static and dynamic content.
  - Setting up SSL/TLS for secure communications.
  - Configuring Nginx for high availability and fault tolerance.

- Go Web Server:
  - Enhancing your Go server to handle dynamic content generation.
  - Interacting with a backend database (to be implemented in later phases).
  - Implementing RESTful APIs with proper routing and middleware.
  - Applying design patterns and testing practices.

** Networking, Communication Protocols, and Proxies
*** Computer Networking
Resources:
- Computer Networking: A Top Down Approach
  
*** Communication Protocols
Resources:
- TCP/IP Illustrated

*** Proxies
Resources:
- HAProxy documentation

*** Books
- Understanding Distributed Systems by Roberto Vitillo
- A Philosophy of Software Design by John Ousterhout

*** Projects
- Implement client-server applications using TCP and UDP sockets in C and Go.
- Develop a real-time chat application using WebSockets in Go.
- Build a proxy server that can forward HTTP requests and responses.

*** Capstone Project
*Multi-Protocol Network Service*

Create a network that supports multiple protocols and can act as a proxy and load balancer.

Goals:
- Apply networking and protocol knowledge.
- Implement advanced features like SSL/TLS encryption.
- Handle concurrent connections efficiently.
- Incorporate software design principles.

** Database and Database Engineering
*** Databases
Resources:
- Database System Concepts by Silberschatz, Korth, and Sudarsharan
- CMU's Intro to Database Systems
  
*** Database Engineering
Resources:
- Database Internals by Alex Petrov

*** Books
- Refactoring by Martin Fowler
- Unit Testing Principles, Practices, and Patterns by Vladimir Khorikov

*** Projects
- Write complex SQL queries involving joins, subqueries, and aggregate functions.
- Build an application that interacts with a database using Go's ~database/sql~ package.

*** Capstone Project
*Custom Database Engine*

Implement a simple database engine that supports basic SQL commands, indexing, and transaction handling.

Goals:
- Understand how databases process and execute queries.
- Learn about data storage, indexing mechanisms, and concurrency control.
- Apply refactoring techniques to improve code quality.

** Distributed Systems, Messaging Systems, and Microservices
*** Distributed Systems
Resources:
- Designing Data-Intensive Applications
  
*** Messaging Systems
Resources:
- Enterprise Integration Patterns by Gregor Hohpe and Bobby Woolf

*** Microservices Architecture
Resources:
- Building Microservices by Sam Newman

*** Books
- Understanding Distributed Systems by Roberto Vitillo
- Software Architecture: The Hard Parts by Neal Ford, Mark Richards, Pramod Sadalage, Zhamak Dehghani
- Growing Object-Oriented Software, Guided by Tests by Steve Freeman and Nat Pryce

*** Projects
- Implement a distributed key-value store with replication and fault tolerance.
- Build a message queue system to facilitate communication between services.
- Develop a set of microservices in Go that communicate over gRPC or REST.

*** Capstone Project
*Scalable Distributed Application*

Build a distributed application using microservices architecture, messaging systems, and distributed databases.

Goals:
- Integrate distributed systems principles.
- Ensure data consistency and system reliability.
- Optimize for scalability and performance.
- Apply advanced software architecture concepts.

** Security and Authentication
*** Security
Resources:
- Web Application Security by Bryan Sullivan and Vincent Liu
- OWASP Top Ten documentation
  
*** Authentication and Authorization
Resources:
- OAuth 2 in Action by Justin Richer and Antonio Sanso

*** Books
- Software Engineering at Google
- Fundamentals of Software Architecture by Mark Richards and Neal Ford

*** Projects
- Develop an API with proper input validation, authentication, and authorization.
- Implement encryption and decryption functions using AES and RSA algorithms.

*** Capstone Project
*Secure Authentication System*

Build a comprehensive authentication and authorization system, including user management, password policies, and multi-factor authentication.

Goals:
- Implement secure storage of user credentials.
- Apply protocols like OAuth2 and JWT.
- Ensure compliance with security standards.
- Incorporate architectural principles from priority books.

** Languages, Compilers, and Message Formats
*** Languages and Compilers
Resources:
- Writing an Interpreter in Go
- Writing a Compiler in Go
- Compilers: Principles, Techniques, and Tools by Aho, Lam, Sethi, and Ullman
  
*** Message Formats
Resources:
- Protocol Buffers documentation
- Data Serialization articles and tutorials

*** Books
- Domain-Driven Design Quickly by Abel Avram and Floyd Marinescu
- Software Architecture: The Hard Parts

*** Projects
- Build an interpreter for a simple programming language in Go.
- Design and implement a custom data serialization format.

*** Capstone Project
*Custom Programming Language*

Design and implement a custom programming language, including its compiler and runtime environment.

Goals:
- Apply knowledge of language design and compiler construction.
- Implement code optimization techniques.
- Explore virtual machines and bytecode execution.
- Incorporate domain-driven design principles.

** Cloud Computing, DevOps, and CI/CDo
*** Cloud Computing
Resources:
- Designing Distributed Systems by Brendan Burns
- Get AWS Solutions Architect, Developer Associate, and SysOps Administrator Certified
  
*** DevOps and CI/CD
Resources:
- The DevOps Handbook
- Continuous Delivery by Jez Humble and David Farley
- Accelerate by Nicole Forsgren, Jez Humble, and Gene Kim

*** Projects
- Cloud Resume Challenge
- Deploy an application to a cloud platform using IaC tools like Terraform.
- Implement a CI/CD pipeline for automated testing and deployment.

*** Capstone Project
*Cloud-Native Application with Automated Deployment*

Develop a cloud-native application that leverages cloud services, and set up a full CI/CD pipeline for it.

Goals:
- Integrate cloud computing knowledge with application development.
- Automate end-to-end deployment and scaling.
- Ensure high availability and reliability.
* Canonical - Junior Linux Kernel Engineer
** C Programming and OS System Fundamentals
Resources:
- C Programming: A Modern Approach
- Operating Systems: Three Easy Pieces

Topics:
- Pointers, structs, dynamic memory management, bitwise operations, etc.
- Systems programming (files, processes, threads, memory management)
- Scheduling, I/O, memory, processes
- Linux architecture Overview

Projects:
- Build a basic Unix-like shell that handles basic commands, forking, process control, and simple I/O redirection.
  
** Linux Kernel Fundamentals
Resources:
- Linux Kernel Development by Robert Love
- Understanding the Linux Kernel
- [[https://kernelnewbies.org][Linux Kernel Newbies]]

Topics:
- Kernel modules and how to write them
- Kernel subsystems (memory management, process scheduling, etc.)
- Kernel debugging techniques (gdb, dmesg, strace)
- Kernel configuration and building your own kernel from source

Projects:
- Write and load kernel modules: Start by wrting simple loadable kernel modules (e.g., a "Hello World" module)
- Customize your kernel: Configure, build, and run your own version of the Linux kernel. Add modules and experiment with kernel parameters.

** Device Driver Development
Resources:
- Linux Device Drivers by Jonathan Corbet

Topics:
- Types of Linux device drivers (character, block, network)
- How drivers interact with hardware
- Writing and testing simple device drivers.
- Kernel debugging techniques specifically to drivers

Projects:
- Develop simple device drivers: Start by writing a character device driver and practice reading/writing to it from user space.
- Extend the driver: Experiment with interrupt handling and DMA

** Contribute to the Linux Kernel
Project:
- Submit your first patch: start by fixing small bugs or contributing to documentation to get comfortable with the process.

** Kernel Security and Debugging
Resources:
- Hacking: The Art of Exploitation by Jon Erickson (for understanding low level exploits and mitigations)
- The Art of Linux Kernel Design by Lixiang Yang
- Linux Kernel Programming by Kaiwan Billimoria

Topics:
- Security hardening techniques (stack protections, SELinux, AppArmor)
- Common vulnerabilities in kernel space and mitigation strategies
- Applying patches to the kernel and understanding the patch review process

Projects:
- Patching and Hardening: Work on patching on vulnerabilities in a kernel you built and experiment with security hardening techniques.

** Rust
Resources:
- The Rust Programming Language

Topics:
- Ownership, lifetimes, concurrency
- Writing Rust modules for the Linux kernel

Project:
- Write a Kernel module in Rust: Use Linux Kernel's experimental support for Rust and write a simple module using the ~rust-for-linux~ initiative.
