:PROPERTIES:
:ID:       33DB4F82-645E-4A52-A8B0-28CE25327DE2
:END:
#+title: Elisp
#+tags: [[id:8D8C89CD-0D59-4314-BC77-D24453E43D7E][Programming]]

* Table of Contents :toc:
- [[#things-to-take-noteresearch-more][Things to take note/research more]]
- [[#list-processing][List Processing]]
- [[#practicing-evaluation][Practicing Evaluation]]
- [[#writing-function-definitions][Writing Function Definitions]]
  - [[#wrting-an-interactive-function][Wrting an ~interactive~ function]]
  - [[#install-code-permanently][Install Code Permanently]]
  - [[#let][~let~]]
  - [[#if][~if~]]
  - [[#save-excursion][~save-excursion~]]
- [[#buffer-related-functions][Buffer-Related Functions]]
  - [[#finding-more-information][Finding More Information]]
  - [[#simplified-beginning-of-buffer-definition][Simplified 'beginning-of-buffer' Definition]]
  - [[#definition-of-mark-whole-buffer][Definition of 'mark-whole-buffer']]
  - [[#definition-of-append-to-buffer][Definition of 'append-to-buffer']]
- [[#more-complex-functions-study][More complex functions study]]
  - [[#copy-to-buffer][~copy-to-buffer~]]
  - [[#insert-buffer][~insert-buffer~]]
  - [[#beginner-of-buffer-complete-definition][~beginner-of-buffer~ complete definition]]
- [[#narrowing-and-widening][Narrowing and Widening]]
  - [[#advantages-of-narrowing][Advantages of Narrowing]]
  - [[#save-restriction-special-form][~save-restriction~ special form]]

* Things to take note/research more
- Byte compiling
  - When, how, and why is it used?
    
* List Processing

Lists are bouned by paretheses, and sometimes preceded by an apostrophe. It looks like: ~'(rose violet daisy buttercup)~.

Lisp "atoms" are words/values that cannot be divided into any smaller parts.

A printed representation of woth atoms and lists are called *symbolic expressions* or ~s-expressions~.

Types of /atoms/:
- Symbols: ~(foo bar foo-bar)~
- Numbers: ~(1 2 3)~
- String: ~("hello world")~

When a list have a "quote" (~'(+ 2 2)~) that precedes the list, it tells Lisp to *do nothing* with the list, other than take it as it is written. If there is no quote preceding the list then the *first* item of the list becomes a *command* (function) for the machine to obey.

* Practicing Evaluation
A file and a buffer are two different entities. A file is information recorded permanently in the computer. A buffer is information inside Emacs that will vanish at the end of the editing session.

* Writing Function Definitions
Structure:
#+begin_src emacs-lisp
  (defun FUNCTION-NAME (ARGUMENTS...)
    "OPTIONAL-DOCUMENTATION..."
    (interactive ARGUMENT-PASSING-INFO)
    BODY...)
#+end_src

Before we evaluate a function we defined, it is important that we first tell the computer about the definition, basically loading the function definition in Emacs.

To install a function definition, we just need te evaluate the ~defun~, then we can evaluate the function call.

** Wrting an ~interactive~ function
#+begin_src emacs-lisp
  (defun multiply-by-seven (number)
    "Multiply NUMBER by seven."
    (interactive "p")
    (message "The result is %d" (* 7 number)))
#+end_src

The expression ~(interactive "p")~ is a list of two elements. The ~"p"~ tells Emacs to pass the *prefix argument* to the function and use its value for the argument of the function.

There are different options for ~interactive~. The ~"p"~ as shown earlier is used for a prefix argument with the function. In almost any case, every option for ~interactive~ will enable the user to pass the right information /interactively/ to a function.

** Install Code Permanently
1. To install code permanently, define the function in the initialization file (~.emacs~ or ~.emacs.d/init.el or ~.config/emacs/init.el~). Code in the init file is automaticall evaluated when we start Emacs.
2. Put the function definition in their own files and use the ~load~ function to evaluate the functions.
3. Define the function in a file called ~site-init.el~ which is loaded when Emacs is built. This makes the code available to everyone who uses your machine.

** ~let~
~let~ is used to attach or bind a symbol to a value in such a way that the interpreter will not confuse the variable with a variable of the same name.

Structure:
#+begin_src emacs-lisp
  (let VARLIST BODY...)
#+end_src

~VARLIST~: list, where each element of which is either a symbol by itself or a two-element list, the first element of which is a symbol.

Basically symbols in the varlist are the variables that are given a value, either nil, or the value of the second element if it is a two-element list.

If the varlist is composed of two-element lists, the template for the ~let~ expression looks like this:

#+begin_src emacs-lisp
  (let ((VARIABLE VALUE)
        (VARIABLE VALUE)
        ...)
    BODY...)
#+end_src

Sample:
#+begin_src emacs-lisp
  (let ((zebra "stripes")
        (tiger "fierce"))
    (message "One kind of animal has %s and another is %s." zebra tiger))
#+end_src

~let~ binds variables using "dynamic binding" by default, and by "lexical binding", which is the preferred form of binding.

To enable lexical binding, add ~;;; -*- lexical-binding: t -*-~ in the first line of your Elisp file.

*** Lexical vs Dynamic Binding

*Lexical Binding*: Variables defined within ~let~ are valid only within the body of the ~let~ expression.

*Dynamic Binding*: The variables created are valid during the execution of the ~let~ expression. Meaning that when we call a function within that ~let~ expression, it can see these local variables, regardles of where the function is defined.

Example:
#+begin_src emacs-lisp
  (setq x 0)

  (defun getx () x)

  (setq x 1)

  (let ((x 2))
    (getx))
#+end_src

With the example above, ~getx~ will return 1 when lexical binding is enabled, and 2 if we use dynamic binding.

This is because for lexical binding, the binding of ~x~ at the /global/ level, where ~getx~ is defined, is 1. It does not see the value of ~x~ inside the ~let~ body because the function ~getx~ is not defined inside the ~let~ body.

For dynamic binding however, ~getx~ returns 2 because it sees the value of ~x~ inside the ~let~ body.

** ~if~
Structure:
#+begin_src emacs-lisp
  (if TRUE-OR-FALSE-TEST
      ACTION-TO-CARRY-OUT-IF-TEST-IS-TRUE)
#+end_src

Example:
#+begin_src emacs-lisp
  (defun type-of-animal (characteristic)
    "Print message in an echo area depending on CHARACTERISTIC.
  If the CHARACTERISTIC is the string \"fierce\",
  then warn of a tiger."
    (if (equal characteristic "fierce")
        (message "It is a tiger!")))
#+end_src

Using with an else-statement:
#+begin_src emacs-lisp
  (defun type-of-animal (characteristic)
    "Print message in an echo area depending on CHARACTERISTIC.
  If the CHARACTERISTIC is the string \"fierce\",
  then warn of a tiger."
    (if (equal characteristic "fierce")
        (message "It is a tiger!")
      (message "It is not fierce!")))

  (type-of-animal "fierce")
  (type-of-animal "striped")
#+end_src

*** ~nil~
The symbol ~nil~ has two meanings, either an empty list, or ~false~. It can be written as an empty list '()' or as 'nil'.

** ~save-excursion~
~save-excursion~ is very common for Elisp programs used for editing. It saves the location of point, executes the body of a function, and then restores point to its previous position if the location was changed.

Its primary purpose is to keep the user from being surprised and disturbed by unexpected movement of point.

*** Point and Mark
*Point*: Current location of the cursor.
*Mark*: A position in the buffer where the user can set. Setting another mark saves the previous mark in the /mark ring/.

The area between the point and the mark is called the /region/.

*** ~save-excursion~ code
Template:
#+begin_src emacs-lisp
  (save-excursion
    BODY...)
#+end_src

In Elisp, ~save-excursion~ often occurs within the body of a ~let~ expression:
#+begin_src emacs-lisp
  (let VARLIST
    (save-excursion
      BODY...))
#+end_src

* Buffer-Related Functions

** Finding More Information
- Function documentation: ~C-h f~
- Variable documentation: ~C-h v~
- Function original source: ~xref-find-definitions~

** Simplified 'beginning-of-buffer' Definition
#+begin_src emacs-lisp
  (defun cg/simplified-beginning-of-buffer ()
    "Move point to the beginning of the buffer;
  leave mark at previous position."
    (interactive)
    (push-mark)
    (goto-char (point-min)))
#+end_src

** Definition of 'mark-whole-buffer'
#+begin_src emacs-lisp
  (defun mark-whole-buffer ()
    "DOCUMENTATION"
    (declare (interactive-only t))
    (interactive)
    (push-mark)
    (push-mark (point-max) nil t)
    (goto-char (minibuffer-prompt-end)))
#+end_src

** Definition of 'append-to-buffer'
A possible implementation of the ~append-to-buffer~ function:
#+begin_src elisp
  (defun append-to-buffer (buffer start end)
    "Append to specified buffer the text of the region.
  It is inserted into that buffer before its point.

  When calling from a program, give three arguments:
  BUFFER (or buffer name), START and END.
  START and END specify the portion of the current buffer to be copied."
    (interactive
     (list (read-buffer "Append to buffer: " (other-buffer
                                              (current-buffer) t))
           (region-beginning) (region-end)))
    ;; The interactive expression starts with a list of a buffer,
    ;; the beginning of a region, and the end of a region.
    
    (let ((oldbuf (current-buffer))) ;; sets the variable of `oldbuf` to the value of `current-buffer`
      (save-excursion ;; saves the location of point and restores it to that position after the expression in the body is completed
        (let* ((append-to (get-buffer-create buffer)) ;; let* allows variable setting in its varlist in sequence, one after another
               (windows (get-buffer-window-list append-to t t))
               point)
          (set-buffer append-to)
          (setq point (point))
          (barf-if-buffer-read-only) ;; displays an error if a buffer is read only. It prematurely ends the function here if an error occurs.
          (insert-buffer-substring oldbuf start end)
          (dolist (window windows)
            (when (= (window-point window) point)
              (set-window-point window (point))))))))
#+end_src

* More complex functions study
** ~copy-to-buffer~
Definition:

#+begin_src elisp
  (defun copy-to-buffer (buffer start end)
    "Copy to specified BUFFER the text of the region.
  The text is inserted into that buffer, replacing existing text there.
  BUFFER can be a buffer or the name of a buffer; this
  function will create BUFFER if it doesn't already exist.

  When calling from a program, give three arguments:
  BUFFER (or buffer name), START and END.
  START and END specify the portion of the current buffer to be copied."
    (interactive "BCopy to buffer: \nr")
    (let ((oldbuf (current-buffer)))
      (with-current-buffer (get-buffer-create buffer) ;; `with-current-buffer` executes the expression within its inner body to the buffer temporarily.
        (barf-if-buffer-read-only)
        (erase-buffer)
        (save-excursion
          (insert-buffer-substring oldbuf start end)))))
#+end_src
** ~insert-buffer~
Earlier code for ~insert-buffer~

#+begin_src elisp
  (defun insert-buffer (buffer)
    "Insert after point the contents of BUFFER.
    Puts mark after the inserted text.
  BUFFER may be a buffer or a buffer name."
    (interactive "*bInsert buffer: ")
    (or (bufferp buffer)
        (setq buffer (get-buffer buffer))) ;; checks if buffer is a buffer object, else sets buffer object to buffer variable
    (let (start end newmark) ;; variables initialized to nil
      (save-excursion
        (save-excursion
          (set-buffer buffer) ;; change Emacs's attention from the current buffer to the one from which the text will be copied
          (setq start (point-min) end (point-max))) ;; save-excurtion restores the original buffer but start and end will remain set to the values of the beginning and end of the buffer
        (insert-buffer-substring buffer start end) ;; copies the text into the current buffer from the region indicated by start and end.
        (setq newmark (point)))
      (push-mark newmark)))
#+end_src

The asterisk in the ~interactive~ function is for the situation when the current buffer is a read-only buffer. If the ~insert-buffer~ is called when the current buffer is read-only, a message is printed in the echo area and will not be permitted to insert anything into the current buffer.

~b~ tells the interpreter that the argument for ~insert-buffer~ should be an existing buffer.

In the body, the ~or~ expression is to ensure that the argument ~buffer~ is bound to a buffer and not just the name of the buffer.

Take note that ~or~ evaluates arguments in turn and returns the value of the first of its aguments that is not ~nil~. It does not evaluate subsequent arguments after returning the first non-nil value.
** ~beginner-of-buffer~ complete definition
#+begin_src elisp
  (defun beginning-of-buffer (&optional arg)
    "Move point to the beginning of the buffer.
  With numeric arg N, put point N/10 of the way from the beginning.
  If the buffer is narrowed, this command uses the beginning of the
  accessible part of the buffer.

  Push mark at previous position, unless either a \\[universal-argument] prefix
  is supplied, or Transient Mark mode is enabled and the mark is active."
    (declare (interactive-only "use `(goto-char (point-min))' instead."))
    (interactive "^P")
    (or (consp arg)
        (region-active-p)
        (push-mark))
    (let ((size (- (point-max) (point-min))))
      (goto-char (if (and arg (not (consp arg)))
                     (+ (point-min) 1
                        (/ (* size (prefix-numeric-value arg)) 10))
                   (point-min))))
    (if (and arg (not (consp arg))) (forward-line 1)))
#+end_src

~optional~ arguments us used to tell the Lisp interpreter that an argument is optional. The keyword is ~&optional~. 

* Narrowing and Widening
~narrowing~ is a feature that makes is possible to focus on a specific part of a buffer and work without accidentally changing other parts.

** Advantages of Narrowing
The rest of the buffer is made invisible, is if it weren't there. For example, replacing a word in one part of a buffer but not in another part. You basically narrow to the part you want and /the replacement is carried out only in that section./

To return the full visibility of the buffer after narrowing, we can use the ~widen~ command (~C-x n w~).

** ~save-restriction~ special form
~save-restriction~ keeps track of whatever narrowing is in effect.
