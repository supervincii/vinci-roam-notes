:PROPERTIES:
:ID:       A962D8BF-C3DC-4C4A-9103-B71CB7AD235E
:END:
#+title: C
#+tags: [[id:8D8C89CD-0D59-4314-BC77-D24453E43D7E][Programming]]

* Table of Contents :toc@4:
- [[#fundamentals][Fundamentals]]
  - [[#compiling-and-linking][Compiling and Linking]]
    - [[#preprocessing][Preprocessing]]
    - [[#compiling][Compiling]]
    - [[#linking][Linking]]
    - [[#to-compile][To compile]]
  - [[#form-of-a-simple-program][Form of a simple program]]
  - [[#variables-and-assignment][Variables and Assignment]]
  - [[#identifiers][Identifiers]]
- [[#formatted-inputoutput][Formatted Input/Output]]
  - [[#conversion-specifications][Conversion Specifications]]
  - [[#scanf][~scanf~]]
- [[#expressions][Expressions]]
  - [[#arithmetic-operators][Arithmetic Operators]]
  - [[#assignment-operators][Assignment Operators]]
    - [[#lvalues][~lvalues~]]
    - [[#increment-and-decrement-operators][Increment and Decrement Operators]]
- [[#selection-statements][Selection Statements]]
  - [[#logical-operators][Logical Operators]]
  - [[#if-statement-and-else-clause][~if~ Statement and ~else~ Clause]]
  - [[#conditional-expressions][Conditional Expressions]]
  - [[#boolean-values-in-c89][Boolean Values in C89]]
  - [[#boolean-values-in-c99][Boolean Values in C99]]
  - [[#switch-statement][~switch~ Statement]]
- [[#loops][Loops]]
  - [[#while-statement][~while~ statement]]
  - [[#do-statement][~do~ statement]]
  - [[#for-statement][~for~ statement]]
  - [[#exiting-from-a-loop][Exiting from a Loop]]
    - [[#break-statement][~break~ statement]]
    - [[#continue-statement][~continue~ statement]]
    - [[#goto-statement][~goto~ statement]]
  - [[#null-statement][~Null~ statement]]
- [[#basic-types][Basic Types]]
  - [[#integer-types][Integer Types]]
    - [[#integer-constants][Integer Constants]]
    - [[#integer-overflow][Integer Overflow]]
    - [[#reading--writing-integers][Reading & Writing Integers]]
  - [[#floating-types][Floating Types]]
    - [[#floating-constants][Floating Constants]]
    - [[#reading-and-writing-floating-point-numbers][Reading and Writing Floating-Point Numbers]]
  - [[#character-types][Character Types]]
    - [[#operations-on-characters][Operations on Characters]]
    - [[#reaading-and-writing-characters-using-scanf-and-printf][Reaading and Writing Characters using ~scanf~ and ~printf~]]
    - [[#reading-and-writing-characters-using-getchar-and-puthchar][Reading and Writing Characters using ~getchar~ and ~puthchar~]]
  - [[#type-conversion][Type Conversion]]
    - [[#the-ususal-arithmetic-conversions][The Ususal Arithmetic Conversions]]
    - [[#conversion-during-assignment][Conversion During Assignment]]
    - [[#casting][Casting]]
  - [[#type-definitions][Type Definitions]]
    - [[#advantages][Advantages]]
    - [[#type-definitions-and-portability][Type Definitions and Portability]]
  - [[#sizeof-operator][~sizeof~ Operator]]
- [[#arrays][Arrays]]
  - [[#one-dimensional-arrays][One-Dimensional Arrays]]
    - [[#array-subscripting][Array Subscripting]]
    - [[#array-initialization][Array Initialization]]
    - [[#designated-initializers][Designated Initializers]]
    - [[#using-the-sizeof-operator-with-arrays][Using the ~sizeof~ operator with arrays]]
  - [[#multidimensional-arrays][Multidimensional Arrays]]
  - [[#constant-arrays][Constant Arrays]]
  - [[#variable-length-arrays][Variable-Length Arrays]]
- [[#functions][Functions]]
  - [[#function-definition][Function Definition]]
  - [[#function-declarations][Function Declarations]]
  - [[#arguments][Arguments]]
    - [[#argument-conversions][Argument Conversions]]
    - [[#array-arguments][Array Arguments]]
      - [[#vla-parameters][VLA Parameters]]
    - [[#using-static-in-array-parameter-declarations][Using ~static~ in Array Parameter Declarations]]
  - [[#program-termination][Program Termination]]
  - [[#recursion][Recursion]]
- [[#program-organization][Program Organization]]
  - [[#local-variables][Local Variables]]
    - [[#static-local-variables][Static Local Variables]]
    - [[#parameters][Parameters]]
  - [[#external-variables][External Variables]]

* Fundamentals
** Compiling and Linking
*** Preprocessing
The program is given to a /preprocessor/ which obeys commands from directives (starts with ~#~).

*** Compiling
The /compiler/ translates the code to machine instructions.

*** Linking
The final step where the /linker/ combines the object code produced by the compiler with any additional code needed to yield an executable. This usually includes library functions (like ~printf~).

*** To compile
#+begin_src shell
  gcc -o <exec-name> <file>
#+end_src

- ~gcc~: compiler
- ~-o~: flag to "write output to ~<exec-name>~"
- ~<exec-name>~: executable name
- ~<file>~: source code file name

** Form of a simple program
#+begin_src c
  // directives

  int main(void) {
    // statements
  }
#+end_src

~#include <stdio.h>~ is called a /directive/ and must be included at the start of a C program. This is because C has no built in "read" and "write" commands. The ~stdio~ header gives us the ability to perform input and output functions.

** Variables and Assignment
Variables must be declared before they can be used.
#+begin_src
  <type> <name>
#+end_src

** Identifiers
Identifiers in C may contain letters, digits, and underscores but *must begin with a letter or underscore.*m

* Formatted Input/Output
** Conversion Specifications
~Conversion specifications~ begins with the ~%~ character. They give a great deal of control over the appearance of the output.

Common conversion specifiers:
- ~d~: integer in decimal
- ~e~: float in exponential format
- ~f~: float in fixed decimal format
- ~g~: float in *either* exponential or fixed decimal format, depending on the number's size.
  - Useful for displaying numbers whose size can't be predicted when the program is written or that tend to vary widely in size.
  - Very large number = exponential format, otherwise fixed decimal

** ~scanf~
~%d~ and ~%i~ can both match an integer written in base 10. ~%i~ however can also match integers expressed in octal (base 8) when prefixed with 0, and hexadecimal (base 16) when prefixed with 0x or 0X.

* Expressions
** Arithmetic Operators
Arithmetic operators are categorized into two: *unary* and *binary*. Unary operators require one operand while binary operators require two.

#+begin_src c
  // unary
  int i = +1;
  int j = -i;

  //binary
  int k = 1 + 2;
  int l = k * 5;
#+end_src

When ~int~ and ~float~ operands are mixed, the result is of type ~float~.

The ~/~ and ~%~ require some care:
- When both operands of / are integers, the operator /truncates/ the result, dropping the fractional part. ~1/2~ is ~0~ and not ~0.5~.
- The % operator requires *integer operands* or else it won't compile.

** Assignment Operators
In most programming langauges, assignment is a /statement/. In C, assignment is an /operator/. In simple terms, the act of assignment *produces a result*.

*** ~lvalues~
lvalue (pronounced "L-value"), represents an object stored in memory. Variables are considered /lvalues/. It is not a constant or the result of a computation.

*** Increment and Decrement Operators
- ~++~: increment
- ~--~: decrement

They can however be used as a prefix (~++i~) or a postfix (~i++~) operator.

With prefix, the value is evaluated to be incremented or decremented first. With postfix, the value is evaluates to itself first, then incremented/decremented.

#+begin_src C
  int i = 1;
  printf("i is %d\n", ++i); // prints "i is 2"
  printf("i is %d\n", i) //prints "i is 2"

  int j = 1;
  printf("j is %d\n", j++); // prints "j is 1"
  printf("j is %d\n", j) //prints "j is 2"
#+end_src

* Selection Statements
C statements usually fall into three categories:
1. *Selection Statements* (~if~ and ~switch~ statements)
2. *Iteration Statements* (~while~, ~do~, and ~for~)
3. *Jump Statements* (~break~, ~continue~, and ~goto~)

** Logical Operators
- ~!expr~ is 1 of ~expr~ has the value 0
- ~expr1 && expr2~ has the value 1 of both are non-zero
- ~expr1 || expr2~ has the value 7 of either/both has a non-zero value.

** ~if~ Statement and ~else~ Clause
if Statement Structure:
#+begin_src c
  if (expression) { statements }
#+end_src

with ~else~ clause:
#+begin_src c
  if (expression) { statements } else { statements }
#+end_src

~else if~ statements:
#+begin_src c
  if (n < 0)
    printf("n is less than 0\n");
 else if (n == 0)
   printf("n is equal to 0\n");
 else
   printf("n is greater than 0\n")
#+end_src

In C, we should be aware of the /dangling ~else~ statement/. This basically means that the ~else~ clause belongs to the nearest ~if~ statement that has not been paired up with an ~else~ statement.

To make an ~else~ clause be a part of an outer ~if~ statement, we enclode the inner statement in braces and put the else statement outside of the braces.

** Conditional Expressions
#+begin_src c
  expr1 ? expr2 : expr3
#+end_src

This translates to: "if ~expr1~ is true, then ~expr2~, else ~expr3~".

** Boolean Values in C89
We can define a macro:
#+begin_src c
  #define TRUE 1
  #define FALSE 0

  ...

  flag = FALSE;
  flag = TRUE;
#+end_src

** Boolean Values in C99
C99 provides a ~_Bool~ type.

#+begin_src c
  _Bool flag;

  // or with the header <stdbool.h>

  #include <stdbool.h>

  bool flag;
  // bool here is a macro that stand for _Bool.
#+end_src

The header ~<stdbool.h>~ also supplies macros named ~true~ and ~false~, which stands for 1 and 0 respectively.


** ~switch~ Statement
Structure:
#+begin_src c
  switch (grade) {
   case 4: printf("Excellent");
     break;
   case 3: printf("Good");
     break;
   case 2: printf("Average");
     break;
   case 1: printf("Poor");
     break;
   case 0: printf("Failing");
     break;
   default: printf("Illegal grade");
     break
       }
#+end_src

Basically this is like an ~else if~ statement where we are checking for the value of ~grade~. The default case applies the value of ~grade~ does not match any of the cases statements.

* Loops
** ~while~ statement
#+begin_src c
  while ( expression ) statement
#+end_src

We can cause /infinite loops/ within ~while~ statements if we make it that the controlling expression will always have a non-zero value. For example: ~while (1) ...~.

Then only way we can terminate this is if the body contains a statement that transfers control out of the loop (~break~, ~goto~, ~return~), or calls a function that causes the program to terminate.
** ~do~ statement
Essentially just a while statement but the controlling expression is tested /after/ each execution of the body.

#+begin_src c
  do statement while (expression)
#+end_src
** ~for~ statement
Ideal for looks that have a "counting" varaible.

#+begin_src c
  for (expr1 ; expr2 ; expr3) statement
#+end_src

Example:
#+begin_src c
  for (i = 10; i > 0; i--)
    printf("T minus %d and counting\n", i);

  // can be translated in a while loop

  i = 10;
  while (i > 0) {
    printf("T minus %d and counting\n", i);
    i--;
  }
#+end_src

In C99, the first expression in a ~for~ loop statement can be a declaration. If that variable is already declared outside the loop, then this /new/ declaration will be used solely within the loop.

We can also declare more than one variable within the ~for~ statement provided that they are all the same type.
** Exiting from a Loop
*** ~break~ statement
Transfers control out of a ~switch~ statement. It can also be used to jump out of a ~while~, ~do~, or ~for~ loop.

Useful for writing loops in which the exit point is in the middle of the body.

In a nested loop, can only escape one level of nesting.

*** ~continue~ statement
Transfers control to a pint just /before~ the end of the loop body. The control remains inside the loop.

~continue~ can't also be used with switch statements.

*** ~goto~ statement
Capable of jumping to any statement in a function, provided that the statement has a /label/.

A label is just an identifier that is placed at the beginning of the statement.
#+begin_src c
  identfier : statement
#+end_src

A statement may have more than one label. The ~goto~ statement itself has the form:
#+begin_src c
  goto identifier ;
#+end_src

Example to prematurely exit a loop:
#+begin_src c
  for (d = 2; d < n; d++)
    if (n % d == 0)
      goto done;

  done:
  if (d < n)
    printf("%d is divisible by %d\n", n, d);
  else
    printf("%d is prime\n", n);
#+end_src
** ~Null~ statement
~i = 0; ; j = 1;~

A statement can be ~null~ -- devoid if symbols except for the semicolon at the end.

The null statement is good for writing loops whose bodies are empty.

* Basic Types
** Integer Types
Divided into /signed/ and /unsigned/.

Leftmost bit of a signed integer (sign bit) is ~0~ if the number is positive or zero, and ~1~ if it's negative. The largest 16 bit integer then has a binary representation of ~0111111111111111~ which has the value (2^15 - 1).

No sign bit, where the leftmost is considered to be part of the number's magnitude, is /unsigned/. Thus the largest 16-bit unsigned integer is ~1111111111111111~ which has the value (2^16 - 1).

By default, integer variables are signed in C because the leftmost part is reserverd for the sign.

Unsigned numbers are primarily useful for systems programming and low-level, machine-dependent applications.

~int~ is usually 32 bits (16 bits on older CPUs).

~long~ allows storing numbers that are too large to store in ~int~ form.
~short~ allows storing a number in less space than normal.

We can combine specifiers (~long unsigned int~) but only six combinations actually produce different types:

1. ~short int~
2. ~unsigned short int~
3. ~int~
4. ~unsigned int~
5. ~long int~
6. ~long unsigned int~

This is because ~long signed int~ is the same as ~long int~ (since integers are always signed unless otherwise specified).

Usual range of values for integer types on a 16 bit machine:

| Type               | Smallest Value | Largest Value |
|--------------------+----------------+---------------|
| short int          | -32,768        | 32,767        |
| unsigned short int | 0              | 65,535        |
| int                | -32,768        | 32,767        |
| unsigned int       | 0              | 65,535        |
| long int           | -2,147,483,648 | 2,147,483,647 |
| unsigned long int  | 0              | 4,294,967,295 |

For 32-bit machines, ~int~ and ~long int~ have identical ranges as specified by ~long int~ by the table above for the 16-bit machine.

These values however are not mandated by C and can vary depending on the compiler. To check, we can use the ~<limits.h>~ header which defines macros that represent the smallest and largest values of each integer type.
*** Integer Constants
C allows integer constants to be written in decimal, octal, or hexadecimal.

- Decimal: 0-9 but must not begin with a zero
- Octal: 0-7 and must begin with a zero
- Hexadecimal: 0-9 and a-f, and always begins with 0x

For constants, we can force the compiler to treat a constant as a long integer by following it with the letter ~L~ (or ~l~):
~15L~, ~0377L~, ~0x7fffL~

Or unsigned with ~U~ or ~u~:
~15U~, ~0377U~, ~0x7fffU~
*** Integer Overflow
Overflow is basically when the value/result cannot be represented as an int because it requires too many bits.

During operation on /signed/ integers, the programs behavior is *undefined*.

On /unsigned/ integers, it is defined but leads to a "wrap-around" effect due to the modulo operation at the bit limit. ~Result % 2^n~ where ~n~ is the number of bits used to store the result.

For example if we add 1 to the unsigned 16-bit number 65,535, the result is guaranteed to be 0.
*** Reading & Writing Integers
~%d~ only works for ~int~ type. For other types, we need new conversion specifiers.

- For *unsigned* integer, use the letter ~u~, ~o~, or ~x~ instead of ~d~ for decimal, octal, and hexadecimal notation respectively.
- For /short/ int, put the letter ~h~ in front of ~d, o, u, or x~.
- For /long/, put the letter ~l~ in front of ~d, o, u, or x~.
- For C99, /long long/ ints, we put the letter ~ll~ in front of ~d, o, u, or x~.
** Floating Types
There are three floating types:
1. ~float~: Single precision floating-point
2. ~double~: Double-precision floating-point
3. ~long double~: Extended-precision floating-point

| Type   | Smallest Positive Value | Largest Value    | Precision |
|--------+-------------------------+------------------+-----------|
| float  | 1.17549 x 10^-38        | 3.40282 x 10^38  | 6 digits  |
| double | 2.22507 x 10^-308       | 1.79769 x 10^308 | 15 digits |

These values is only valid for computers that follow the IEEE standard.

Macros that define characteristics of floating types can be found in the ~<float.h>~ header.

*** Floating Constants
Can be written in a variety of ways:
#+begin_src 
  57.0 57. 57.0e0 57E0 5.7e1 5.7e+1 .57e2 570.e-1
#+end_src

It must containt a decimal point and/or an exponent.

By default, floating constants are stored as ~double~ precision numbers. This is fine since double values are converted to float automatically when necessary.

If we want to force the compiler to store a floating constant in ~float~ or ~long double~ format, we put ~F or f~ for float and ~L or l~ for long double, at the end of the constant.

*** Reading and Writing Floating-Point Numbers
We use ~%e, %f, and %g~.

For type ~double~, we put the letter ~l~ in front of ~e, f, or g~.

For ~long double~ we put the letter ~L~ in front of ~e, f, or g~.
** Character Types
~char~ can be assigned any single character.
#+begin_src c
  char ch;
  ch = 'a';
  ch = 'A';
  ch = '0'; // zero
  ch = ' '; // space
#+end_src

Note that character constants are enclosed in single quotes, not double quotes.

*** Operations on Characters
/C treats characters as small integers./

#+begin_src c
  char ch;
  int i;

  i = 'a'; // i is now 97
  ch = 65; // ch is now 'A'
  ch = ch + 1; // ch is now 'B'
  ch++; // ch is now 'C'
#+end_src

Characters can only be compared using <, >, <=, >=, ==. Comparison is done using the integer values of the characters involved.

*** Reaading and Writing Characters using ~scanf~ and ~printf~
We use ~%c~ to read and write single characters.

~scanf~ doesn't skip white-space characters before reading a character. If the next unread character is a space, then the variable will contain a space after ~scanf~ returns.

To force ~scanf~ to skip white space before reading a character, put a space in its format string just before ~%c~.

#+begin_src c
  scanf(" %c", &ch);
#+end_src

*** Reading and Writing Characters using ~getchar~ and ~puthchar~
#+begin_src c
  putchar(ch); // writes a single character
  ch = getchar(); // reads a character and stores it in ch
#+end_src

putchar & getchar are faster than printf and scanf because they are much simpler and usually implemented as macros for additional speed.

#+begin_src c
  do {
    scanf("%c", &ch);
  } while (ch != '\n');

  // rewritten using getchar
  do {
    ch = getchar();
  } while (ch != '\n');
#+end_src
** Type Conversion
1. ~Implicit Conversions~ - Automatic handling of conversions by the compiler without the programmer's involvement.
2. ~Explicit Conversions~ - Uses cast operator.

Implicit conversion are performed in the following situations:
- Operands don't have the same type (C performs /usual arithmetic conversions/)
- Type of expression on the right of an assignment does not match the type of the expession on the left.
- Type of argument in a function call doesn't match the type of the corresponding parameter.
- Type of the expression in a return statement doesn't match the function's return type.
  
*** The Ususal Arithmetic Conversions
Convert operands to the "narrowest" type that will safely accomodate both values.

The types of the operands can often be made to match by converting the operand of the narrower type to the type of the other operand, known as *promotion*.

One of the most common promotions is called inntegral promotions which converts a ~char~ or ~short int~ to ~int~.

Promotion cases:
1. Type of either operand is a floating type: float -> double -> long double
2. Neither is a floating type: int -> unsigned int -> long int -> long unsigned int

*** Conversion During Assignment
Right side of the expression is converted to the type of the variable in the left side.

*** Casting
Form:
#+begin_src
  (type-name) expression
#+end_src

Sample:
#+begin_src c
  float f, frac_part;

  frac_part = f - (int) f;
#+end_src

Sometimes, cast are necessary to avoid overflow. Consider the following example:
#+begin_src c
  long i;
  int j = 1000;

  i = j * j;
#+end_src

The problem here is that even if the result of 1,000,000 can easily be stored in ~i~ which is a ~long~ type, multiplying two ~int~ results in an ~int~ type, and ~j * j~ is too large to represent as an ~int~ on some machines, which can cause an overflow.

Casting can avoid this problem.

#+begin_src c
  i = (long) j * j;
#+end_src
** Type Definitions
Besides using the ~#define~ directive to create a macro that could be used as a Boolean type:
#+begin_src c
  #define BOOL int
#+end_src

We can use /type definition/:
#+begin_src c
  typedef int Bool;

  // we can not use Bool in the same way as the built-in type names

  Bool flag;
#+end_src

*** Advantages

- Make programs more understandable
- Make a program easier to modify

*** Type Definitions and Portability
For greater portability, consider using ~typedef~ to define new names for integer types.

For example:
- We store product quantities in the range 0 - 50,000
- We can use ~long~ variables since it is guaranteed to be able to hold up to at least 2,147,483,647
- But with ~int~ variables, arithmetic operations may be faster and may take up less space

Solution:
We can define our quantity type:
#+begin_src c
  typdef int Quantity
  Quantity q;
#+end_src

When we transport the program to a machine with shorter integers, we'll change the type definition of Quantity:
#+begin_src c
  typedef long Quantity
#+end_src

Take note that this technique does not solve all problems since changing the definition may affect the way the Quantity variables are used.

** ~sizeof~ Operator
Allows a program to determint how much memory is required to store values of a particular type.
#+begin_src c
  sizeof (type-name)
#+end_src

* Arrays

** One-Dimensional Arrays
An /array/ is a data structure containing a number of data values, all of which have the same type. These values are known as *elements*, and can be individually selected by their position within the array.

Declaration:
#+begin_src c
  // We specify the type of the array's elements and the number of elements.
  int a[10]
#+end_src

*** Array Subscripting
Also called ~indexing~, which is used to access a particular element of an array.

*** Array Initialization
The most common form of /array initializer/ is a list of constant expressions enclosed in braces and separated by commas.

If the initializer is shorter than the array, the remaining elements of the array are given the value of 0.

*** Designated Initializers
If we want:
~int a[15] = {0, 0, 29, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 48}~
We use designated initializers:
~int a[15] = {[2] 29, [9] = 7, [14] = 48}~

*** Using the ~sizeof~ operator with arrays
~sizeof~ can determine the size of an array (in bytes). If a is an array of 10 integers, then ~sizeof(a)~ is typically 40 (assuming that each integer requires 4 bytes).

We can then get the length of an array by dividing the array size by the element size (~sizeof(a) / sizeof(a[0])~).

** Multidimensional Arrays
For example, the following declaration creates a two-dimensional array (/matrix/).

#+begin_src C
  // The array m has 5 rows and 9 columns
  int m[5][9];
#+end_src

Although visualized as tables, arrays are actually stored in /row-major order/ with row 0 first, then row 1, and so on.

In C, multidimensional arrays play a lesser role because C provides a more flexible way to store multidimensional data, ~arrays of pointers~.

** Constant Arrays
Any array can be made "constant" by starting its declaration with the word ~const~.

#+begin_src c
  const char hex_chars[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
#+end_src

Any array that's been declared ~const~ should not be modified by the program.

~const~ isn't limited to arrays. It works with any variables. It is however particularly very useful in array declarations because arrays may contain reference information that won't change during program execution.

** Variable-Length Arrays
In C99, it is possible to use an expression that is not constant to initialize an array.

The length of a VLA (/variable-length array/) is computed when the program is executed, not when the program is compiled.

Like other arrays, VLAs can be multidimensional.

* Functions

** Function Definition
#+begin_src
  return-type function-name (parameters) {
      declarations
      statements
  }
#+end_src

~return-type~ is the type of value that the function returns. Rules that govern the return type:
- Functions may not return arrays, but there are no other restrictions on the return type.
- ~void~ return type indicates that the function doesn't return a value.

** Function Declarations
We can declare a function before calling it.

#+begin_src c
  #include <stdio.h>

  double average(double a, double b); // DECLARATION

  int main(void) {
    double x, y, z;

    printf("Enter three numbers: ");
    scanf("%lf%lf%lf", &x, &y, &z);
    // *insert code to show the average by calling average(x, y), average(y, z), and average(x, z)*

    return 0;
  }

  double average(double a, double b) { // DEFINITION
    return (a + b) / 2;
  }
#+end_src

** Arguments
*Parameters*: appear in *function definitions*. Dummy names.
*Arguments*: expressions that appear in function calls.

*** Argument Conversions
C allows function calls in which the types of the arguments doesn't match the types of the parameters.

Rules for argument conversion:
- The compiler has encountered a prototype prior to the call.
  - Argument value is implicitly converted to the type of the parameter.
- The compiler has not encountered a prototype prior to the call. The compiler then performs the default argument promotions.

*** Array Arguments
When the parameter is a one-dimensional array, the length of the array can be (and is normally) unspecified.

#+begin_src c
  int f(int a[]) /* no length specified */
  {
    return 0;
  }
#+end_src

The function ~f~ however will not know how long the array is. To do that, we supply it with a *second argument*.

#+begin_src c
  // PROTOTYPE
  int sum_array(int [], int);

  // FUNCTION DEFINITION
  int sum_array(int a[], int n) {
      int i, sum = 0;

      for(i = 0; i < n; i++)
        sum += a[i];

      return sum;
    }
#+end_src

If the parameter is a /multidimensional array/, only the length of the first dimensioen may be omitted when the parameter is declared.

#+begin_src c
  #define LEN 10

  int sum_two_dimensional_array(int a[][LEN], int n) {
    int i, j. sum = 0;

    for(i = 0; i < n; i++)
      for(j = 0; j < LEN; j++)
        sum += a[i][j];

    return sum;
  }
#+end_src

**** VLA Parameters
Consider the ~sum_array~ function.

#+begin_src c
  // before
  int sum_array(int a[], int n) {
    // ...
  }

  // with variable-length arrays
  int sum_array(int n, int a[n]) {
    // ...
  }
#+end_src

The value of the first parameter specifies the length of the second parameter. Notice that the order of the parameters has been switched. The order is important when variable-length array parameters are used.

To write the prototype of ~sum_array~ with VLAs:

#+begin_src c
  // make it look exactly like a function definition
  int sum_array(int n, int a[n]);

  // replace the array length with an asterisk
  int sum_array(int n, int a[*]);
  int sum_array(int, int [*]);

  // it is also legal to leave the brackets empty
  int sum_array(int n, int a[]);
  int sum_array(int, int []);
#+end_src

Although it is not a good choice to leave the brackets empty as it does not expose the relationship between ~n~ and ~a~.

Using VLA parameter for multidimensional arrays:

#+begin_src c
  int num_two_dimensional_array(int n, int m, int a[n][m]) {
    int i, j, num = 0;

    for(i = 0; i < n; i++)
      for(j = 0; j < m; j++)
        sum += a[i][j];

    return sum;
  }

  // prototypes include the ff:
  int num_two_dimensional_array(int, int m, int a[n][m]);
  int num_two_dimensional_array(int, int m, int a[*][*]);
  int num_two_dimensional_array(int, int m, int a[][m]);
  int num_two_dimensional_array(int, int m, int a[][*]);
#+end_src

*** Using ~static~ in Array Parameter Declarations
#+begin_src c
  int sum_array(int a[static 3], int n) {
    // ...
  }
#+end_src

~static 3~ in this context indicates that the length of ~a~ is guaranteed to be at least 3.

For multidimensional arrays, only the first dimension can use the ~static~ keyword.

** Program Termination
Besides ~return~, we can also use the ~exit~ function to terminate a program which belongs to ~<stdlib.h>~.

#+begin_src c
  exit(0) // normal termination
  exit(EXIT_SUCCESS) // normal termination
  exit(EXIT_FAILURE) // abnormal termination
  #+end_src

~return expression~ in main is equivalent to ~exit(expression)~.

The difference between ~return~ and ~exit~ is that ~exit~ causes program termination regardless of which function calls it. ~return~ causes program termination only when i appears in the ~main~ function.

** Recursion
A function is /recursive/ if it /calls itself/.

#+begin_src c
  // function that computes n!
  // using the formula n! = n * (n - 1)!
  int fact(int n) {
    if (n <= 1)
      return 1;
    else
      return n * fact(n - 1);
  }

  // ---

  // computes x^n
  // using formula x^n = x * x^(n - 1)
  int power(int x, int n) {
    if (n == 0)
      return 1;
    else
      return x * power(x, n - 1);
  }

  // condensed version
  int power_condensed(int x, int n) {
    return n == 0 ? 1 : x * power(x, n - 1);
  }
#+end_src

* Program Organization

** Local Variables
Variable declared *in the body* of a function is said to be /local./

#+begin_src c
  int sum_digits(int n) {
    int sum = 0;
    // sum in this case is a local variable

    while (n > 0) {
      sum += n % 10;
      n /= 10;
    }
    return sum;
  }
#+end_src

Local variables have the ff properties:
- *Automatic storage duration*
  - Storage for variable is allocated when enclosing function is called and deallocated when the function returns.
- *Block scope*
  - Variable is visible from the point of declaration to the end of the enclosing function.

*** Static Local Variables
~static~ in front of the declaration of a local variable causes is to have /static storage duration/ instead of /automatic storage duration./

Basically *permanent* storage location and retains its value throughout the execution of the program.

#+begin_src c
  void f(void) {
    static int i; // static local variable
  }
#+end_src

When ~f~ returns, ~i~ won't lose its value.

~i~ still has block scope and is not visible to other functions, but can retain the value for future function calls.

*** Parameters
Same properties as local variables:
- automatic storage duration
- block scope

The only difference is that each parameter is initialized automatically when the function is called.

** External Variables

Variables declared outside the body of any function.

Also called /global variables/.

Properties:
- /Static storage duration/
- /File scope/
  - visible from its point of declaration to the end of the enclosing file.

Example using external variables to implement a ~stack~:

#+begin_src c
  #include <stdbool.h>

  #define STACK_SIZE 100

  // external variables
  int contents[STACK_SIZE];
  int top = 0;

  void make_empty(void) {
    top = 0;
  }

  bool is_empty(void) {
    return top == 0;
  }

  bool is_full(void) {
    return top == STACK_SIZE;
  }

  void push(int i) {
    if (is_full())
      stack_overflow();
    else
      contents[top++] = i;
  }

  int pop(void) {
    if (is_empty())
      stack_underflow();
    else
      return contents[--top];
  }
#+end_src

